package com.bank.demo.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.bank.demo.controller.dto.UserDTO;
import com.bank.demo.controller.mapper.UserMapper;
import com.bank.demo.entity.User;
import com.bank.demo.service.UserService;

import lombok.AllArgsConstructor;




@RestController
@AllArgsConstructor
@RequestMapping("/api/users")
public class UserController {
	private final UserService userServ;
	private final UserMapper mapper;
	
//	@GetMapping
//	public ResponseEntity<List<UserDTO>> getAllUsers(){
//		List<User> users = userServ.findAll();
//		List<UserDTO> responseList = new ArrayList<>();
//		users.forEach( u -> {
//			UserDTO uResponse = new UserDTO();
//			uResponse.setId(u.getId());
//			uResponse.setNId(u.getNId());
//			uResponse.setFullName(u.getFullName());
//			uResponse.setPhone(u.getPhone());
//			List<AccountDTO> accs = new ArrayList<>();
//			for(Account acc : u.getAccounts()) {
//				AccountDTO aR = new AccountDTO();
//				aR.setAccId(acc.getAccId());
//				aR.setAccType(acc.getAccType());
//				aR.setBalance(acc.getBalance());
//				aR.setUser_id(u.getId());
//				accs.add(aR);
//			}
//			uResponse.setAccounts(accs);
//			responseList.add(uResponse);
//		});
//		return new  ResponseEntity<>(responseList , HttpStatus.OK);
//	}
	@GetMapping
	public ResponseEntity<List<UserDTO>> getAllUsers(){
		List<User> users = userServ.findAll();
		List<UserDTO> userdto = new ArrayList<>();
		users.forEach(u -> {
			userdto.add(mapper.toDTO(u));
		});
		return new  ResponseEntity<>(userdto , HttpStatus.OK);
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<UserDTO> getOneUser(@PathVariable(value = "id" ) int id) {
		UserDTO user = mapper.toDTO(userServ.findById(id));
		return new ResponseEntity<>(user, HttpStatus.OK);
	}
	
	@GetMapping("/nid")
	public ResponseEntity<UserDTO> getByNID(@RequestParam(value = "nid" ) String nid) {
		UserDTO user = mapper.toDTO(userServ.findByNId(nid));
		return new ResponseEntity<>(user, HttpStatus.OK);
	}
	
	@GetMapping("/phone")
	public ResponseEntity<UserDTO> getByPhone(@RequestParam(value = "phone") long phone) {
		UserDTO user = mapper.toDTO(userServ.findByPhone(phone));
		return new ResponseEntity<>(user, HttpStatus.OK);
	}
	
	@PostMapping
	public ResponseEntity<String> postUser(@RequestBody UserDTO userdto) {	
		User user = mapper.toUser(userdto);
		userServ.saveUser(user);
		return new ResponseEntity<>("User Saved Successfully", HttpStatus.CREATED);
	}
	
	@PutMapping
	public ResponseEntity<String> putUser(@RequestBody UserDTO userdto) {	
		User user = mapper.toUser(userdto);
		userServ.saveUser(user);
		return new ResponseEntity<>("User Saved Successfully", HttpStatus.ACCEPTED);
	}
	
	@PatchMapping("/{id}")
	public ResponseEntity<UserDTO> patchUser(@RequestBody UserDTO userdto ,@PathVariable int id) {	
		User user = mapper.toUser(userdto);
		userServ.editUser(id, user);
		UserDTO userOut = mapper.toDTO(userServ.findById(id));
		return new ResponseEntity<>(userOut, HttpStatus.ACCEPTED);
	}
}
